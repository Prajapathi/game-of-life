{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["operation","generateEmptyGrid","rows","i","push","Array","from","App","useState","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","setGrid","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","grid","onClick","Math","random","style","display","gridTemplateColumns","map","col","newGrid","width","height","backgroundColor","undefined","border","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAQMA,EAAY,CAChB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IAEDC,EAAoB,WAExB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAhBF,GAgBeA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAhBT,KAgByB,kBAAM,MAG7C,OAAOH,GAmGMK,MAjGf,WAEE,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAGhBG,GAAQ,SAAAC,GACN,OAAOC,YAAQD,GAAG,SAAAE,GAChB,IAD6B,IAAD,WACnBhB,GACP,IAF0B,eAEjBiB,GACP,IAAIC,EAAY,EAChBrB,EAAUsB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACtBC,EAAOtB,EAAIoB,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKA,EAzCf,IAyCiCC,GAAQ,GAAKA,EAxC9C,KAyCAL,GAAaJ,EAAEQ,GAAMC,OAGrBL,EAAY,GAAKA,EAAY,EAC/BF,EAAShB,GAAGiB,GAAK,EACI,IAAZH,EAAEd,GAAGiB,IAA0B,IAAdC,IAC1BF,EAAShB,GAAGiB,GAAK,IAZZA,EAAI,EAAGA,EAnCV,GAmCuBA,IAAM,EAA1BA,IADFjB,EAAI,EAAGA,EAnCR,GAmCqBA,IAAM,EAA1BA,SAmBbwB,WAAWb,EAAe,QACzB,IACH,EAAwBN,oBAAS,WAC/B,OAAOP,OADT,mBAAO2B,EAAP,KAAaZ,EAAb,KAIA,OACE,qCACE,wBACEa,QAAS,WACPnB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,MALN,SAQGL,EAAU,OAAS,UAEtB,wBAAQoB,QAAS,WAEf,IADA,IAAM3B,EAAO,GACJC,EAAI,EAAGA,EA1ER,GA0EqBA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MA1Ef,KA0E+B,kBAAMyB,KAAKC,SAAW,GAAM,EAAI,MAGvEf,EAAQd,IANV,oBAUA,wBAAQ2B,QAAS,WACfb,EAAQf,MADV,mBAKA,qBACE+B,MAAO,CACLC,QAAS,OACTC,oBAAoB,UAAD,OAzFb,GAyFa,YAHvB,SAOIN,EAAKO,KAAI,SAACjC,EAAMC,GAAP,OACPD,EAAKiC,KAAI,SAACC,EAAKhB,GAAN,OACP,qBAEES,QAAS,WACP,IAAMQ,EAAUnB,YAAQU,GAAM,SAAAT,GAC5BA,EAAShB,GAAGiB,GAAKQ,EAAKzB,GAAGiB,GAAK,EAAI,KAEpCJ,EAAQqB,IAEVL,MAAO,CACLM,MAAO,GACPC,OAAQ,GACRC,gBAAiBZ,EAAKzB,GAAGiB,GAAK,YAASqB,EACvCC,OAAQ,oBAZZ,UACUvC,EADV,YACeiB,gBCzFduB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.244486e6.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react'\nimport { produce } from 'immer';\nimport './App.css';\n\nconst numRows = 50;\nconst numCols = 50;\n\n\nconst operation = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n]\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n}\nfunction App() {\n\n  const [running, setRunning] = useState(false)\n\n  const runningRef = useRef(running);\n  runningRef.current = running\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operation.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n    setTimeout(runSimulation, 100);\n  }, []);\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          setRunning(!running);\n          if (!running) {\n            runningRef.current = true;\n            runSimulation();\n          }\n        }}>\n        {running ? \"stop\" : \"start\"}\n      </button>\n      <button onClick={() => {\n        const rows = [];\n        for (let i = 0; i < numRows; i++) {\n          rows.push(Array.from(Array(numCols), () => Math.random() > 0.8 ? 1 : 0));\n        }\n\n        setGrid(rows);\n      }}>\n        Random\n      </button>\n      <button onClick={() => {\n        setGrid(generateEmptyGrid());\n      }}>\n        Clear\n      </button>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${numCols}, 20px)`\n        }}\n      >\n        {\n          grid.map((rows, i) =>\n            rows.map((col, k) =>\n              <div\n                key={`${i}-${k}`}\n                onClick={() => {\n                  const newGrid = produce(grid, gridCopy => {\n                    gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                  });\n                  setGrid(newGrid)\n                }}\n                style={{\n                  width: 20,\n                  height: 20,\n                  backgroundColor: grid[i][k] ? 'pink' : undefined,\n                  border: \"solid 1px black\"\n                }}\n              />\n            )\n          )\n        }\n      </div >\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}